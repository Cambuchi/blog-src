[{"content":"Introduction When it comes to building a blog/portfolio site, beginners are often directed to services like WordPress or Squarespace. This is understandable, as these website builders provide a tightly guided creation process. Past this beginner plateau however, the difficulty in creating and hosting a fully customizable site increases dramatically. Some services can alleviate this, but often for a price.\nAfter reading this thread on reddit I realized that even for people with web development experience, the lack of easily available instructions have many defaulting back to this beginner step as well. If you think more advanced web-content creation involves diving into code or crafting HTML for every post, then the editors on website building services would indeed seem very appealing. However I am here to tell you that this is not the case, and that similar tools and easy to use workflows are available for custom built sites as well.\nThis guide aims to create a guided \u0026ldquo;mid-tier\u0026rdquo; plateau that those beginning their web development journey can reference to help them move beyond standard website builders. We will build the site with Hugo, apply a site theme, use Forestry.io for our CMS, and host with GitHub Pages.\nWhy this stack? 1. Free  From beginning to end, this entire process is free. This blog you are looking at right now was made for free and does not cost anything to host. GitHub Pages is already set up to easily support paid custom domains if you want a different URL for your blog.  2. Easy content creation with a CMS  Making content is just as easy as website builders. You get a fully functional online text/markdown editor that automatically commits to your sites repository. No need to open code or edit HTML just to make a new post. Here is an example of me making a new post for my blog on Forestry:  3. Easy to use/workflow  Create content on Forestry (this commits to your repository) Run a script that does the following  Pull update from repository into your build directory Build site using Hugo Add, commit, and push changes to your repository   GitHub Pages detects that you made changes and automatically updates your site within minutes. After creating the content, it takes me less than 30 seconds to update my site with the new post.  4. Easy to set-up  Hugo and Hugo Themes do all of the heavy lifting for generating your website. No need to build all the logic and HTML for tags. categories, search functionality, syntax highlighting, etc. Generating a site and getting it online can be done in less than an hour.  5. Customization  Since everything is HTML and JavaScript, changing the site layout and little details is completely under your control. No more default footers advertising WordPress or Squarespace on your site. Toggle or button not where you want it? Moving elements around and custom CSS is easily done in the Hugo framework.  6. Git and GitHub  At the end of this you will have a site with a commit history for both posts and site edits. This is built into the build and deploy scripts so it\u0026rsquo;s very integrated. Somehow broke your site? Just git checkout back to a working commit.  Assumptions  This guide is written for Windows 10, but very applicable to Linux/Mac.  Git and Git Bash are installed. This is how I use Git and run bash scripts on Windows 10.   Visual Studio Code was used to edit and create all of the files necessary. For customizing: you have some understanding of how HTML/CSS/Javascript work. You can manipulate the DOM and find out classes/selectors for elements from the console.  Let\u0026rsquo;s begin!\nGitHub Setup Before we get started, make sure you have a GitHub account. It\u0026rsquo;s free, easy to set up, and incredibly useful.\n The first step is to create two repositories in GitHub. One for the files you use to generate your website and the other for serving your static website files. Make sure both are public and empty.   Repo #1: \u0026lt;your-website-build\u0026gt;\n The above repository will be used for your website build. I recommend something like blog-build, blog-source, portfolio-build, etc.    Repo #2: \u0026lt;your-website\u0026gt;\n  The above repository will be used to serve your generated web files to the internet. I recommend something like blog, portfolio, or \u0026lt;username\u0026gt;.github.io (special repository name).\n Note: If you set Repo #2 to blog your website URL will be \u0026lt;username\u0026gt;.github.io/blog/, if instead you want \u0026lt;username\u0026gt;.github.io to direct to your site, then use that as the name.\nE.g. your username is coolperson, set Repo #2 to coolperson.github.io.\n       Hugo Setup This will setup Hugo on your system so that you can use it as a command from Git Bash/Terminals. Hugo is a framework for building websites that automates much of the process while still allowing for very deep customization. Commands like hugo server will run a local live-server for easy website previewing/tweaking and hugo will generate the static files you will serve as your website.\nThe following instructions are specific for Windows 10. Mac and Linux users can find installation instructions here.\nSetup  Create a new folder C:\\Hugo. Create a subfolder in the Hugo folder C:\\Hugo\\bin. Download the latest zipped Hugo executable for your system from Hugo Releases.  For me this was hugo_0.91.2_Windows-64bit.zip.   Extract all contents to your C:\\Hugo\\bin folder.   Your directory should look like the following:\n C:\r└───Hugo\r└───bin\r├───hugo.exe\r├───LICENSE\r└───README.md\r    Add the C:\\Hugo\\bin folder to Windows PATH settings.  Hit the Windows + R key combination or from the start menu type run and hit enter. In the run application, type SystemPropertiesAdvanced and hit enter.\n Click on Environment Variables... on the bottom right.  Under User variables double click on PATH (might be Path).  If you are an admin and they only user of your computer feel free to add to the PATH under System variables.   Click on New. Type C:\\Hugo\\bin hit enter and then click OK. Click OK on the Environment Variables window, and then OK on the System Properties window.    Verify At this point we need to run a few commands to verify that the executable is ready to use. To ensure that the PATH environment variables have propagated, it\u0026rsquo;s best to restart your computer. At the very least, make sure Git Bash and any Terminal apps are fully closed.\n  Open Git Bash.\n  Type hugo help and hit enter.\n  You should see output that starts with:\n hugo is the main command, used to build your Hugo site.\rHugo is a Fast and Flexible Static Site Generator\rbuilt with love by spf13 and friends in Go.\rComplete documentation is available at https://gohugo.io/.\r   If you see that, success! You have correctly installed Hugo.\n  If the installation was not successful, please consult the official Hugo instructions for installing on Windows here.\n  Build \u0026amp; Theme Site Now for the meat and potatoes. We will build the site with Hugo, attach our theme of choice, rig it all up to GitHub, and deploy to GitHub Pages. Let\u0026rsquo;s go!\nCreate the GitHub build directory.   On your build repository on GitHub (Repo#1), copy the HTTPS link. It should look something like https://github.com/\u0026lt;username\u0026gt;/blog-build.git.\n  Git Bash into the folder where you want to keep your build directory.\n cd documents/github\r  Pay special attention to the slashes! Windows file paths with \\ will not work in Unix based utilities.    Clone your build repository:\n git clone https://github.com/\u0026lt;username\u0026gt;/blog-build.git\r   A new empty folder with your repository name should now exist in the directory. E.g. documents\\github\\blog-build.\n  Build the site with Hugo and attach a theme.   In the Git Bash terminal, build your Hugo site into the newly created directory with the following:\n hugo new site \u0026lt;folder-name\u0026gt; -f yml --force\r  E.g. hugo new site blog-build -f yml --force. You should see a message in the terminal congratulating you.   Note: feel free to omit -f yml if you want to use the default toml files for your configurations. I am more familiar with yaml/yml files and find them easier to read but they are both quite similar.\n   Our theme in this example we be PaperMod. Feel free to browse the many themes at https://themes.gohugo.io/ for other options.\n  In the terminal, go into the build directory.\n cd \u0026lt;folder-name\u0026gt;\r  E.g. cd blog-build    Now that we\u0026rsquo;re inside our Hugo site folder, run:\n git clone https://github.com/adityatelange/hugo-PaperMod themes/PaperMod --depth=1\r  Note: to update the theme, go into the PaperMod theme folder and git pull.\nE.g. cd themes/PaperMod followed by git pull.\n   Create a config file.\n  ","permalink":"https://cambuchi.github.io/blog/posts/my-first-post/","summary":"Introduction When it comes to building a blog/portfolio site, beginners are often directed to services like WordPress or Squarespace. This is understandable, as these website builders provide a tightly guided creation process. Past this beginner plateau however, the difficulty in creating and hosting a fully customizable site increases dramatically. Some services can alleviate this, but often for a price.\nAfter reading this thread on reddit I realized that even for people with web development experience, the lack of easily available instructions have many defaulting back to this beginner step as well.","title":"Build a blog with CMS \u0026 Git functionality "},{"content":"","permalink":"https://cambuchi.github.io/blog/projects/","summary":"","title":"Projects"}]