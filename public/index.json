[{"content":"Some text above\n1 2 3 4 5 6 7 8 9 10 11 12 13  { \u0026#34;firstName\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastName\u0026#34;: \u0026#34;Smith\u0026#34;, \u0026#34;age\u0026#34;: 25 } package main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello, World!\u0026#34;) }   Some text below\n1 2 3 4 5 6 7 8 9 10 11 12 13  { \u0026#34;firstName\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastName\u0026#34;: \u0026#34;Smith\u0026#34;, \u0026#34;age\u0026#34;: 25 } package main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello, World!\u0026#34;) }   Another one\n1 2 3 4  const Person = (name, age) =\u0026gt; { const sayName = () =\u0026gt; console.log(name) } let Cam = Person(\u0026#39;Cam\u0026#39;, \u0026#39;30\u0026#39;);   And we will see what the default code input is below:\nconst Person = (name, age) =\u0026gt; {\rconst sayName = () =\u0026gt; console.log(name)\r}\rlet Cam = Person('Cam', '30');\r how about inline code?\nlastly let\u0026rsquo;s check if the hugo method works\n1  `\u0026lt;section id=\u0026#34;main\u0026#34;\u0026gt; \u0026lt;div\u0026gt; \u0026lt;h1 id=\u0026#34;title\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ range .Pages }} {{ .Render \u0026#34;summary\u0026#34;}} {{ end }} \u0026lt;/div\u0026gt; \u0026lt;/section\u0026gt;`   follow up with some JS\n1 2 3 4 5  const Person = (name, age) =\u0026gt; { const sayName = () =\u0026gt; console.log(name) } let Cam = Person(\u0026#39;Cam\u0026#39;, \u0026#39;30\u0026#39;);   1 2 3 4 5 6 7  const primes = num =\u0026gt; { let arr = Array.from({ length: num - 1 }).map((x, i) =\u0026gt; i + 2), sqroot = Math.floor(Math.sqrt(num)), numsTillSqroot = Array.from({ length: sqroot - 1 }).map((x, i) =\u0026gt; i + 2); numsTillSqroot.forEach(x =\u0026gt; (arr = arr.filter(y =\u0026gt; y % x !== 0 || y === x))); return arr; };   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  // when trash icon is clicked, display modal and change onclick functionality to match // target element actions const clickTrashIcon = (data, element) =\u0026gt; { // display confirmation modal const modal = document.getElementById(\u0026#39;modal-confirm\u0026#39;); modal.style.display = \u0026#39;flex\u0026#39;; // remove previous onclick functions const confirm = document.getElementById(\u0026#39;modal-confirm-submit\u0026#39;); confirm.onclick = null; // onclick logic for when group trash items are clicked if (element.classList.contains(\u0026#39;group-item\u0026#39;)) { confirm.onclick = function deleteGroup() { DOM.clickGroupTrash(element); Logic.deleteGroup(data, element.textContent); DataStorage.setLocalStorage(\u0026#39;todolist\u0026#39;, data); modal.style.display = \u0026#39;none\u0026#39;; }; // onclick logic for when tasks are being trashed } else if (element.classList.contains(\u0026#39;task\u0026#39;)) { confirm.onclick = function deleteTask() { const currentGroup = document.getElementById(\u0026#39;main-header-title\u0026#39;).textContent; Logic.deleteTask(data\\[currentGroup\\], element.id); Logic.renumberTasks(data\\[currentGroup\\].tasks); DOM.populateTasks(data, currentGroup); DataStorage.setLocalStorage(\u0026#39;todolist\u0026#39;, data); modal.style.display = \u0026#39;none\u0026#39;; }; } };   Last but not least let\u0026rsquo;s see how this works in practice.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  //play a move (move is an index on the board) play(move) { //if board index is not empty (0) or game is in win condition, invalid move if (this.board\\[move\\] !== 0 || this.isWin) { return false; } //plays a 1 or 2 on the board (representing X or O) this.board\\[move\\] = this.turn; this.moves.push(move); //checks the board and updates the game state if needed // Use regular expression to detect any 3-in-a-row this.isWin = /^(?:...)*(\\[12\\])\\\\1\\\\1|^.?.?(\\[12\\])..\\\\2..\\\\2|^(\\[12\\])...\\\\3...\\\\3|^..(\\[12\\]).\\\\4.\\\\4/.test(this.board.join(\u0026#34;\u0026#34;)); this.isDraw = !this.isWin \u0026amp;\u0026amp; this.moves.length === this.board.length; return true; }   Did that work?\nFinal test\u0026hellip;? maybe.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  //play a move (move is an index on the board) play(move) { //if board index is not empty (0) or game is in win condition, invalid move  if (this.board[move] !== 0 || this.isWin) { return false; } //plays a 1 or 2 on the board (representing X or O)  this.board[move] = this.turn; this.moves.push(move); //checks the board and updates the game state if needed  // Use regular expression to detect any 3-in-a-row  this.isWin = /^(?:...)*([12])\\1\\1|^.?.?([12])..\\2..\\2|^([12])...\\3...\\3|^..([12]).\\4.\\4/.test(this.board.join(\u0026#34;\u0026#34;)); this.isDraw = !this.isWin \u0026amp;\u0026amp; this.moves.length === this.board.length; return true; }   Complete?\n","permalink":"https://cambuchi.github.io/blog/posts/my-first-post/","summary":"Some text above\n1 2 3 4 5 6 7 8 9 10 11 12 13  { \u0026#34;firstName\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastName\u0026#34;: \u0026#34;Smith\u0026#34;, \u0026#34;age\u0026#34;: 25 } package main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello, World!\u0026#34;) }   Some text below\n1 2 3 4 5 6 7 8 9 10 11 12 13  { \u0026#34;firstName\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;lastName\u0026#34;: \u0026#34;Smith\u0026#34;, \u0026#34;age\u0026#34;: 25 } package main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello, World!","title":"Build a blog with CMS \u0026 Git functionality "},{"content":"","permalink":"https://cambuchi.github.io/blog/projects/","summary":"","title":"Projects"}]